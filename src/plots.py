import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import plotly.express as px
import plotly.graph_objects as go
from collections import Counter
import re
import io
from pathlib import Path

# –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–æ –∫–æ–¥–∏—Ä–æ–≤–∫–µ (IPC)
CODIFIER_MAP = {
    'A': '–£–î–û–í–õ–ï–¢–í–û–†–ï–ù–ò–ï –ñ–ò–ó–ù–ï–ù–ù–´–• –ü–û–¢–†–ï–ë–ù–û–°–¢–ï–ô –ß–ï–õ–û–í–ï–ö–ê',
    'B': '–†–ê–ó–õ–ò–ß–ù–´–ï –¢–ï–•–ù–û–õ–û–ì–ò–ß–ï–°–ö–ò–ï –ü–†–û–¶–ï–°–°–´; –¢–†–ê–ù–°–ü–û–†–¢–ò–†–û–í–ê–ù–ò–ï',
    'C': '–•–ò–ú–ò–Ø; –ú–ï–¢–ê–õ–õ–£–†–ì–ò–Ø',
    'D': '–¢–ï–ö–°–¢–ò–õ–¨; –ë–£–ú–ê–ì–ê',
    'E': '–°–¢–†–û–ò–¢–ï–õ–¨–°–¢–í–û –ò –ì–û–†–ù–û–ï –î–ï–õ–û',
    'F': '–ú–ê–®–ò–ù–û–°–¢–†–û–ï–ù–ò–ï; –û–°–í–ï–©–ï–ù–ò–ï; –û–¢–û–ü–õ–ï–ù–ò–ï; –û–†–£–ñ–ò–ï –ò –ë–û–ï–ü–†–ò–ü–ê–°–´; –í–ó–†–´–í–ù–´–ï –†–ê–ë–û–¢–´',
    'G': '–§–ò–ó–ò–ö–ê',
    'H': '–≠–õ–ï–ö–¢–†–ò–ß–ï–°–¢–í–û',
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç–µ–Ω—Ç–æ–≤",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –°—Ç–∏–ª—å –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
    }
    .patent-card {
        background-color: white;
        padding: 1rem;
        margin: 0.5rem 0;
        border-radius: 10px;
        border-left: 4px solid #1f77b4;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.markdown('<h1 class="main-header">üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–Ω–µ–ª—å –ø–∞—Ç–µ–Ω—Ç–æ–≤</h1>', unsafe_allow_html=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data(uploaded_file):
    try:
        # –ß—Ç–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–∞
        df = pd.read_csv(uploaded_file, encoding='utf-8')
        return df
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–æ–ª–±—Ü–æ–≤)
def process_data(df):
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = df.dropna(how='all')

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if 'registration_date' in df.columns:
        df['registration_date'] = pd.to_datetime(df['registration_date'], format='%d.%m.%Y', errors='coerce')

    # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ codifier –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    if 'codifier' in df.columns:
        df['codifier'] = df['codifier'].astype(str).str.strip().str.upper()

    # –ê–≤—Ç–æ—Ä—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
    if 'authors' in df.columns:
        df['authors'] = df['authors'].astype(str)

    # –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
    if 'subdivision' in df.columns:
        df['subdivision'] = df['subdivision'].fillna('–ù–µ —É–∫–∞–∑–∞–Ω–æ').astype(str).str.strip()

    return df

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
st.sidebar.title("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

data_source = st.sidebar.radio(
    "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö",
    ["–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", "–í—ã–±—Ä–∞—Ç—å –∏–∑ ./data"],
    index=1
)

df = None

if data_source == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª":
    uploaded_file = st.sidebar.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –ø–∞—Ç–µ–Ω—Ç–∞–º–∏",
        type=['csv'],
        help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: certificate_number, registration_date, title, title_link, publication_ref, authors, subdivision, codifier"
    )
    if uploaded_file is not None:
        df_raw = load_data(uploaded_file)
        if df_raw is not None:
            df = process_data(df_raw)
else:
    data_dir = (Path(__file__).resolve().parent / '..' / 'data').resolve()
    available_csv_paths = sorted([p for p in data_dir.glob('*.csv')])
    if available_csv_paths:
        selected_filename = st.sidebar.selectbox("–§–∞–π–ª –∏–∑ ./data:", [p.name for p in available_csv_paths])
        if selected_filename:
            selected_path = data_dir / selected_filename
            df_raw = load_data(str(selected_path))
            if df_raw is not None:
                df = process_data(df_raw)
    else:
        st.sidebar.info("–í –ø–∞–ø–∫–µ ./data –Ω–µ—Ç CSV —Ñ–∞–π–ª–æ–≤")

# –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
if 'df' in locals() and df is not None:
    
    # –§–∏–ª—å—Ç—Ä—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    st.sidebar.title("üîç –§–∏–ª—å—Ç—Ä—ã")
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏/–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é
    if 'subdivision' in df.columns:
        subdivision_values = ['–í—Å–µ'] + sorted(df['subdivision'].unique().tolist())
        selected_subdivision = st.sidebar.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é/–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:",
            subdivision_values
        )
    else:
        selected_subdivision = '–í—Å–µ'
        st.sidebar.warning("–°—Ç–æ–ª–±–µ—Ü 'subdivision' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")

    # –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–¥–∏—Ä–æ–≤–∫–µ (IPC)
    selected_codifiers = []
    codifier_display_options = []
    available_codifiers = []
    if 'codifier' in df.columns:
        available_codifiers = sorted([c for c in df['codifier'].dropna().astype(str).str.upper().unique().tolist() if c in CODIFIER_MAP])
        codifier_display_options = [f"{c} - {CODIFIER_MAP.get(c, '')}" for c in available_codifiers]
        default_codifiers = codifier_display_options
        selected_codifier_display = st.sidebar.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª(—ã) –ø–æ –∫–æ–¥–∏—Ä–æ–≤–∫–µ (IPC):",
            options=codifier_display_options,
            default=default_codifiers
        )
        selected_codifiers = [s.split(' - ')[0] for s in selected_codifier_display]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if 'registration_date' in df.columns:
        min_date = df['registration_date'].min()
        max_date = df['registration_date'].max()
    else:
        min_date = pd.NaT
        max_date = pd.NaT
    
    if not df.empty and pd.notna(min_date) and pd.notna(max_date):
        date_range = st.sidebar.date_input(
            "–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫",
            [min_date, max_date],
            min_value=min_date,
            max_value=max_date
        )
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        df_filtered = df.copy()

        # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é
        if selected_subdivision != '–í—Å–µ' and 'subdivision' in df_filtered.columns:
            df_filtered = df_filtered[df_filtered['subdivision'] == selected_subdivision]
        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–¥–∏—Ä–æ–≤–∫–µ
        if 'codifier' in df_filtered.columns and available_codifiers:
            if selected_codifiers and len(selected_codifiers) < len(available_codifiers):
                df_filtered = df_filtered[df_filtered['codifier'].isin(selected_codifiers)]
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if len(date_range) == 2 and 'registration_date' in df_filtered.columns:
            mask = (df_filtered['registration_date'] >= pd.to_datetime(date_range[0])) & (df_filtered['registration_date'] <= pd.to_datetime(date_range[1]))
            df_filtered = df_filtered[mask]
    else:
        df_filtered = df.copy()
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é
        if selected_subdivision != '–í—Å–µ' and 'subdivision' in df_filtered.columns:
            df_filtered = df_filtered[df_filtered['subdivision'] == selected_subdivision]
        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–¥–∏—Ä–æ–≤–∫–µ
        if 'codifier' in df_filtered.columns and available_codifiers:
            if selected_codifiers and len(selected_codifiers) < len(available_codifiers):
                df_filtered = df_filtered[df_filtered['codifier'].isin(selected_codifiers)]
        st.sidebar.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    st.sidebar.markdown("---")
    st.sidebar.subheader("üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã")
    st.sidebar.write(f"**–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è:** {selected_subdivision}")
    if 'date_range' in locals() and len(date_range) == 2:
        st.sidebar.write(f"**–ü–µ—Ä–∏–æ–¥:** {date_range[0]} - {date_range[1]}")
    if 'codifier' in df.columns and available_codifiers:
        if not selected_codifiers or len(selected_codifiers) == len(available_codifiers):
            st.sidebar.write("**–ö–æ–¥–∏—Ä–æ–≤–∫–∞ (IPC):** –í—Å–µ")
        else:
            st.sidebar.write(f"**–ö–æ–¥–∏—Ä–æ–≤–∫–∞ (IPC):** {', '.join(selected_codifiers)}")
    st.sidebar.write(f"**–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:** {len(df_filtered)}")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
    tab1, tab2, tab3, tab4, tab5 = st.tabs(["üìà –û–±–∑–æ—Ä", "üìä –ì—Ä–∞—Ñ–∏–∫–∏", "üìã –î–∞–Ω–Ω—ã–µ", "üë• –ê–≤—Ç–æ—Ä—ã", "üè¢ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏"])

    with tab1:
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–í—Å–µ–≥–æ –ø–∞—Ç–µ–Ω—Ç–æ–≤", len(df_filtered))
        
        with col2:
            st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤", df_filtered['authors'].nunique())
        
        with col3:
            if 'registration_date' in df_filtered.columns and not df_filtered.empty and pd.notna(df_filtered['registration_date'].min()):
                st.metric("–ü–µ—Ä–≤—ã–π –ø–∞—Ç–µ–Ω—Ç", df_filtered['registration_date'].min().strftime('%d.%m.%Y'))
            else:
                st.metric("–ü–µ—Ä–≤—ã–π –ø–∞—Ç–µ–Ω—Ç", "–ù/–î")

        with col4:
            if 'registration_date' in df_filtered.columns and not df_filtered.empty and pd.notna(df_filtered['registration_date'].max()):
                st.metric("–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ç–µ–Ω—Ç", df_filtered['registration_date'].max().strftime('%d.%m.%Y'))
            else:
                st.metric("–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ç–µ–Ω—Ç", "–ù/–î")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω
        if 'selected_subdivision' in locals() and selected_subdivision != '–í—Å–µ':
            st.info(f"üî¨ –û—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏: **{selected_subdivision}**")
        
        # –ö–∞—Ä—Ç–æ—á–∫–∏ –ø–∞—Ç–µ–Ω—Ç–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
        st.subheader("üéØ –ü–∞—Ç–µ–Ω—Ç—ã")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        patents_to_show_initially = 3
        total_patents = len(df_filtered)
        
        if total_patents > 0:
            # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ç–µ–Ω—Ç–æ–≤
            for i, (_, row) in enumerate(df_filtered.head(patents_to_show_initially).iterrows()):
                with st.container():
                    date_str = row['registration_date'].strftime('%d.%m.%Y') if ('registration_date' in row and pd.notna(row['registration_date'])) else "–ù/–î"
                    main_lab_info = f"<p><strong>–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è:</strong> {row['subdivision']}</p>" if 'subdivision' in row else ""
                    
                    st.markdown(f"""
                    <div class="patent-card">
                        <h4>{row['title']}</h4>
                        <p><strong>–ù–æ–º–µ—Ä:</strong> {row.get('certificate_number', '')}</p>
                        <p><strong>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</strong> {date_str}</p>
                        <p><strong>–ü—É–±–ª–∏–∫–∞—Ü–∏—è/—Å—Å—ã–ª–∫–∞:</strong> {row.get('publication_ref', '')}</p>
                        {main_lab_info}
                        <p><strong>–ê–≤—Ç–æ—Ä—ã:</strong> {row['authors']}</p>
                        <p>{f'<a href="{row["title_link"]}" target="_blank">üìÑ –î–æ–∫—É–º–µ–Ω—Ç PDF</a>' if ('title_link' in row and str(row['title_link']).strip()) else ''}</p>
                    </div>
                    """, unsafe_allow_html=True)
            
            # –ï—Å–ª–∏ –ø–∞—Ç–µ–Ω—Ç–æ–≤ –±–æ–ª—å—à–µ, —á–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–æ—Ä–¥–µ–æ–Ω
            if total_patents > patents_to_show_initially:
                with st.expander(f"üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–∞—Ç–µ–Ω—Ç—ã ({total_patents} –≤—Å–µ–≥–æ)", expanded=False):
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–∞—Ç–µ–Ω—Ç—ã
                    for i, (_, row) in enumerate(df_filtered.iloc[patents_to_show_initially:].iterrows()):
                        with st.container():
                            date_str = row['registration_date'].strftime('%d.%m.%Y') if ('registration_date' in row and pd.notna(row['registration_date'])) else "–ù/–î"
                            main_lab_info = f"<p><strong>–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è:</strong> {row['subdivision']}</p>" if 'subdivision' in row else ""
                            
                            st.markdown(f"""
                            <div class="patent-card">
                                <h4>{row['title']}</h4>
                                <p><strong>–ù–æ–º–µ—Ä:</strong> {row.get('certificate_number', '')}</p>
                                <p><strong>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</strong> {date_str}</p>
                                <p><strong>–ü—É–±–ª–∏–∫–∞—Ü–∏—è/—Å—Å—ã–ª–∫–∞:</strong> {row.get('publication_ref', '')}</p>
                                {main_lab_info}
                                <p><strong>–ê–≤—Ç–æ—Ä—ã:</strong> {row['authors']}</p>
                                <p>{f'<a href="{row["title_link"]}" target="_blank">üìÑ –î–æ–∫—É–º–µ–Ω—Ç PDF</a>' if ('title_link' in row and str(row['title_link']).strip()) else ''}</p>
                            </div>
                            """, unsafe_allow_html=True)
        else:
            st.info("–ù–µ—Ç –ø–∞—Ç–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            
        with tab2:
            st.subheader("üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏")
            
            if len(df_filtered) > 0:
                col1, col2 = st.columns(2)
                
                with col1:
                    # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
                    if 'registration_date' in df_filtered.columns and not df_filtered.empty and pd.notna(df_filtered['registration_date']).any():
                        df_filtered['month'] = df_filtered['registration_date'].dt.month
                        monthly_counts = df_filtered['month'].value_counts().sort_index()  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º: 1, 2, ..., 12

                        if not monthly_counts.empty:
                            fig2 = px.pie(
                                values=monthly_counts.values,
                                names=monthly_counts.index,
                                title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ç–µ–Ω—Ç–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º',
                                category_orders={"names": list(monthly_counts.index)}  # –§–∏–∫—Å–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫
                            )
                            fig2.update_layout(
                                legend=dict(
                                    traceorder="normal"  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ª–µ–≥–µ–Ω–¥–∞ –∏–¥—ë—Ç –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ –∏ –¥–∞–Ω–Ω—ã–µ
                                )
                            )
                            st.plotly_chart(fig2, use_container_width=True)
                
                with col2:
                    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –ø–æ –¥–∞—Ç–∞–º
                    if 'registration_date' in df_filtered.columns and not df_filtered.empty and pd.notna(df_filtered['registration_date']).any():
                        fig3 = px.histogram(df_filtered, x='registration_date', title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ç–µ–Ω—Ç–æ–≤ –ø–æ –¥–∞—Ç–∞–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
                                        labels={'registration_date': '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç–µ–Ω—Ç–æ–≤'})
                        st.plotly_chart(fig3, use_container_width=True)
                    
                    # Heatmap –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    if 'registration_date' in df_filtered.columns and not df_filtered.empty and pd.notna(df_filtered['registration_date']).any():
                        df_filtered['year'] = df_filtered['registration_date'].dt.year
                        df_filtered['month_num'] = df_filtered['registration_date'].dt.month
                        heatmap_data = df_filtered.groupby(['year', 'month_num']).size().unstack(fill_value=0)
                        if not heatmap_data.empty:
                            fig4 = px.imshow(heatmap_data, title='–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –º–µ—Å—è—Ü–∞–º –∏ –≥–æ–¥–∞–º',
                                            labels=dict(x="–ú–µ—Å—è—Ü", y="–ì–æ–¥", color="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç–µ–Ω—Ç–æ–≤"))
                            st.plotly_chart(fig4, use_container_width=True)
            else:
                st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")

    with tab3:
        st.subheader("üìã –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        # –ü–æ–∏—Å–∫
        search_term = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞–º:")
        
        if search_term:
            filtered_df = df_filtered[df_filtered['title'].str.contains(search_term, case=False, na=False) | 
                            df_filtered['authors'].str.contains(search_term, case=False, na=False)]
        else:
            filtered_df = df_filtered
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        if not filtered_df.empty:
            display_df = filtered_df.copy()
            if 'registration_date' in display_df.columns:
                display_df['registration_date'] = display_df['registration_date'].dt.strftime('%d.%m.%Y')
            
            # –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            columns_to_display = []
            for col in ['certificate_number', 'title', 'registration_date', 'publication_ref', 'authors', 'subdivision', 'codifier']:
                if col in display_df.columns:
                    columns_to_display.append(col)
            
            st.dataframe(
                display_df[columns_to_display],
                use_container_width=True,
                height=400
            )
            
            # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            csv = filtered_df.to_csv(index=False, encoding='utf-8')
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ CSV",
                data=csv,
                file_name="patents_data.csv",
                mime="text/csv",
            )
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    with tab4:
        st.subheader("üë• –ê–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ—Ä–æ–≤")
        
        if not df_filtered.empty:
            # –ê–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ—Ä–æ–≤
            all_authors = []
            for authors_str in df_filtered['authors']:
                if pd.notna(authors_str):
                    authors = [author.strip() for author in str(authors_str).split(',')]
                    all_authors.extend(authors)
            
            if all_authors:
                author_counts = Counter(all_authors)
                
                col1, col2 = st.columns(2)
                
                with col1:
                    # –¢–æ–ø –∞–≤—Ç–æ—Ä–æ–≤
                    top_authors = pd.DataFrame(author_counts.most_common(10), columns=['–ê–≤—Ç–æ—Ä', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç–µ–Ω—Ç–æ–≤'])
                    fig5 = px.bar(top_authors, x='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç–µ–Ω—Ç–æ–≤', y='–ê–≤—Ç–æ—Ä', 
                                title='–¢–æ–ø-10 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤',
                                orientation='h')
                    st.plotly_chart(fig5, use_container_width=True)
                
                with col2:
                    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞–≤—Ç–æ—Ä–æ–≤
                    df_filtered['author_count'] = df_filtered['authors'].apply(lambda x: len(str(x).split(',')) if pd.notna(x) else 0)
                    author_count_dist = df_filtered['author_count'].value_counts().sort_index()
                    fig6 = px.pie(values=author_count_dist.values, names=author_count_dist.index,
                                title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞–≤—Ç–æ—Ä–æ–≤ –≤ –ø–∞—Ç–µ–Ω—Ç–µ')
                    st.plotly_chart(fig6, use_container_width=True)
                
                # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∞–≤—Ç–æ—Ä–∞–º
                st.subheader("–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ—Ä–æ–≤")
                selected_author = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:", sorted(author_counts.keys()))
                
                if selected_author:
                    author_patents = df_filtered[df_filtered['authors'].str.contains(selected_author, na=False)]
                    st.write(f"**–ü–∞—Ç–µ–Ω—Ç—ã –∞–≤—Ç–æ—Ä–∞ {selected_author}:**")
                    for _, patent in author_patents.iterrows():
                        date_str = patent['registration_date'].strftime('%d.%m.%Y') if ('registration_date' in patent and pd.notna(patent['registration_date'])) else "–ù/–î"
                        lab_info = f" ({patent['subdivision']})" if 'subdivision' in patent else ""
                        st.write(f"- {patent['title']} ({date_str}){lab_info}")
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ—Ä–∞—Ö")
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–≤—Ç–æ—Ä–æ–≤")

    with tab5:
        st.subheader("üè¢ –ê–Ω–∞–ª–∏–∑ –ø–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è–º")
        
        if 'subdivision' in df.columns:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è–º
            lab_stats = df['subdivision'].value_counts()
            
            col1, col2 = st.columns(2)
            
            with col1:
                # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è–º
                fig7 = px.pie(values=lab_stats.values, names=lab_stats.index,
                            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ç–µ–Ω—Ç–æ–≤ –ø–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è–º')
                st.plotly_chart(fig7, use_container_width=True)
            
            with col2:
                # –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è–º
                fig8 = px.bar(x=lab_stats.index, y=lab_stats.values,
                            title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç–µ–Ω—Ç–æ–≤ –ø–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è–º',
                            labels={'x': '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è', 'y': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç–µ–Ω—Ç–æ–≤'})
                fig8.update_layout(xaxis_tickangle=-45)
                st.plotly_chart(fig8, use_container_width=True)
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è–º
            st.subheader("–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è–º")
            for lab in lab_stats.index:
                lab_data = df[df['subdivision'] == lab]
                with st.expander(f"üî¨ {lab} ({len(lab_data)} –ø–∞—Ç–µ–Ω—Ç–æ–≤)"):
                    if 'registration_date' in lab_data.columns:
                        min_d = lab_data['registration_date'].min()
                        max_d = lab_data['registration_date'].max()
                        min_s = min_d.strftime('%d.%m.%Y') if pd.notna(min_d) else '–ù/–î'
                        max_s = max_d.strftime('%d.%m.%Y') if pd.notna(max_d) else '–ù/–î'
                        st.write(f"**–ü–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:** {min_s} - {max_s}")
                    st.write(f"**–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤:** {lab_data['authors'].nunique()}")
                    
                    # –¢–æ–ø –∞–≤—Ç–æ—Ä–æ–≤ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
                    lab_authors = []
                    for authors_str in lab_data['authors']:
                        if pd.notna(authors_str):
                            authors = [author.strip() for author in str(authors_str).split(',')]
                            lab_authors.extend(authors)
                    
                    if lab_authors:
                        top_lab_authors = Counter(lab_authors).most_common(5)
                        st.write("**–¢–æ–ø –∞–≤—Ç–æ—Ä–æ–≤:**")
                        for author, count in top_lab_authors:
                            st.write(f"- {author} ({count} –ø–∞—Ç–µ–Ω—Ç–æ–≤)")
        else:
            st.warning("–°—Ç–æ–ª–±–µ—Ü 'subdivision' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")

    # –õ–∞–Ω–¥—à–∞—Ñ—Ç –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏
    st.markdown("---")
    st.subheader("üåê –õ–∞–Ω–¥—à–∞—Ñ—Ç –ø–∞—Ç–µ–Ω—Ç–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")

    if not df_filtered.empty and 'authors' in df_filtered.columns:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±–ª–∞–∫–∞ —Ç–æ—á–µ–∫
        fig_landscape = go.Figure()

        # –ê–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ—Ä–æ–≤ –¥–ª—è –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞
        all_authors_landscape = []
        for authors_str in df_filtered['authors']:
            if pd.notna(authors_str):
                authors = [author.strip() for author in str(authors_str).split(',')]
                all_authors_landscape.extend(authors)
        
        if all_authors_landscape:
            author_counts_landscape = Counter(all_authors_landscape)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
            for i, (author, count) in enumerate(author_counts_landscape.most_common(5)):
                author_patents = df_filtered[df_filtered['authors'].str.contains(author, na=False)]

                fig_landscape.add_trace(go.Scatter(
                    x=author_patents['registration_date'] if 'registration_date' in author_patents.columns else None,
                    y=[i] * len(author_patents),
                    mode='markers',
                    name=author,
                    marker=dict(size=15, opacity=0.7),
                    text=author_patents['title'],
                    hovertemplate='<b>%{text}</b><br>–ê–≤—Ç–æ—Ä: ' + author + '<br>–î–∞—Ç–∞: %{x}<extra></extra>'
                ))

            fig_landscape.update_layout(
                title='–õ–∞–Ω–¥—à–∞—Ñ—Ç –ø–∞—Ç–µ–Ω—Ç–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —Ç–æ–ø-5 –∞–≤—Ç–æ—Ä–∞–º',
                xaxis_title='–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
                yaxis_title='–ê–≤—Ç–æ—Ä—ã',
                showlegend=True,
                height=400
            )

            st.plotly_chart(fig_landscape, use_container_width=True)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞")
    else:
        st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞")

else:
    st.info("üëà –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ç–µ–Ω—Ç–æ–≤ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
st.sidebar.markdown("---")
st.sidebar.info("""
**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:**
1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
2. –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: certificate_number, registration_date, title, title_link, publication_ref, authors, subdivision, codifier
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
4. –ü–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ—Å—å –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
""")